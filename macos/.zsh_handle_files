# Image Handling 
#using exiftool, and imagemagick to handle images
# exiftool -overwrite_original -all= -Orientation -Orientation
# convert -auto-orient image.jpg image.jpg
# pdf images to png
# pdfimages -png input.pdf output
# pdf images to jpg
# pdfimages -jpegs input.pdf output
# pdf images to tiff
# pdfimages -tiff input.pdf output

# Helper function to process a single image file
process_single_image() {
  local file="$1"
  
  # Check if file exists and is readable
  if [[ ! -e "$file" ]]; then
    echo "‚ö†Ô∏è File does not exist: $file"
    return 1
  fi
  
  if [[ ! -r "$file" ]]; then
    echo "‚ö†Ô∏è File is not readable: $file"
    return 1
  fi
  
  # Check if it's an image or PDF file
  if [[ "$file" =~ \.(jpg|jpeg|png|tiff|gif|bmp|ico|webp)$ ]]; then
    echo "üîç Processing image file: $file"
  elif [[ "$file" =~ \.(pdf)$ ]]; then
    echo "üîç Processing PDF file: $file"
    # Default to convert PDF to image
    convert=true
  else
    echo "‚ùå Error: File is not a supported image format: $file"
    return 1
  fi
  
  # Generate output filename
  local dirname="$(dirname "$file")"
  local basename="$(basename "$file")"
  local extension="${basename##*.}"
  local filename="${basename%.*}"
  local output_file=""
  
  # Generate a random name if requested
  if [[ "$random_name" == true ]]; then
    # Generate a random 8-character name
    local random_str=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
    filename="${random_str}"
  # Use sanitized name if requested
  elif [[ "$name" == true ]]; then
    # Replace spaces with underscores, then remove other special characters
    filename=$(echo "$filename" | tr ' ' '_' | tr -cd '[:alnum:]._-')
  fi
  
  # Use different format if converting
  if [[ "$convert" == true && -n "$convert_format" ]]; then
    extension="$convert_format"
  fi
  
  # Build output filename
  output_file="${dirname}/${filename}.${extension}"
  
  # Don't overwrite input file with same name
  if [[ "$output_file" == "$file" && "$keep_original" == true ]]; then
    output_file="${dirname}/${filename}_processed.${extension}"
  fi
  
  # Create a temporary directory for processing
  local temp_dir=$(mktemp -d)
  trap 'rm -rf "$temp_dir"' EXIT
  
  # Temporary file for processing
  local temp_output="${temp_dir}/processed.${extension}"
  
  # Make a copy of the original file to work with
  cp "$file" "$temp_output"
  
  # Sanitize EXIF data if requested
  if [[ "$sanitize" == true ]]; then
    echo "üßπ Sanitizing EXIF data..."
    echo "Original EXIF data:"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    exiftool "$temp_output" | grep -v "File Name" | grep -v "Directory" | grep -v "File Size" | grep -v "File Modification Date/Time"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Preserve orientation but remove all other metadata
    exiftool -overwrite_original -all= -Orientation "$temp_output"
    
    echo "EXIF data after sanitization:"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    exiftool "$temp_output"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  fi
  
  # Rotate image if requested
  if [[ "$rotate" == true ]]; then
    echo "üîÑ Rotating image by ${rotate_degrees} degrees..."
    convert "$temp_output" -rotate "$rotate_degrees" "$temp_output"
  fi
  
  # Convert image if requested
  if [[ "$convert" == true ]]; then
    echo "üîÑ Converting image to format: ${extension}..."
    # If PDF, handle special case
    if [[ "$file" =~ \.pdf$ ]]; then
      convert -density 300 "$temp_output" "${temp_dir}/converted.${extension}"
      mv "${temp_dir}/converted.${extension}" "$temp_output"
    else
      convert "$temp_output" "${temp_dir}/converted.${extension}"
      mv "${temp_dir}/converted.${extension}" "$temp_output"
    fi
  fi
  
  # Apply OCR if requested
  if [[ "$ocr" == true ]]; then
    echo "üîç Applying OCR..."
    if ! command -v tesseract &> /dev/null; then
      echo "‚ùå Error: Tesseract OCR not installed."
      read -p "Do you want to install it? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        brew install tesseract
      else
        return 1
      fi
    fi
    
    tesseract "$temp_output" "${temp_dir}/ocr_text"
    echo "üìù OCR text saved to: ${dirname}/${filename}_ocr.txt"
    cp "${temp_dir}/ocr_text.txt" "${dirname}/${filename}_ocr.txt"
  fi
  
  # Extract text if requested
  if [[ "$text" == true ]]; then
    echo "üìù Extracting text..."
    if ! command -v tesseract &> /dev/null; then
      echo "‚ùå Error: Tesseract OCR not installed."
      read -p "Do you want to install it? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        brew install tesseract
      else
        return 1
      fi
    fi
    
    tesseract "$temp_output" "${temp_dir}/extracted_text"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    cat "${temp_dir}/extracted_text.txt"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  fi
  
  # Copy processed file to output location
  cp "$temp_output" "$output_file"
  
  # Handle original file
  if [[ "$keep_original" == true ]]; then
    echo "üíæ Original file kept: $file"
  else
    if [[ "$file" != "$output_file" ]]; then
      echo "üóëÔ∏è Removing original file: $file"
      rm "$file"
    fi
  fi
  
  echo "‚úÖ Processed: $file -> $output_file"
  return 0
}

handle_image() {
  # Show help if no arguments or help option provided
  if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
    echo "üì∑ Image Handler"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "Usage: handle_image [options] file.jpg|directory [file2.jpg|directory2 ...]"
    echo ""
    echo "Options:"
    echo "  -c, --convert [format]    Convert image to different format (jpg, png, etc.)"
    echo "  -r, --rotate [90|180|270] Rotate image by specified degrees"
    echo "  -s, --sanitize            Sanitize EXIF data"
    echo "  -o, --ocr                 Apply OCR to extract text"
    echo "  -t, --text                Extract text from image"
    echo "  -n, --name                Rename image with sanitized name (spaces/special chars removed)"
    echo "  -R, --recursive           Process images in directories recursively"
    echo "  --random                  Generate random name for processed files"
    echo "  -k, --keep                Keep original files"
    echo "  -h, --help                Show this help message"
    echo ""
    echo "Default: If no options are provided, EXIF data will be sanitized."
    return 0
  fi

  # Check if required tools are installed
  if ! command -v convert &> /dev/null; then
    echo "‚ùå Error: ImageMagick not installed. "
    read -p "Do you want to install it? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      brew install imagemagick
    else
      return 1
    fi
  fi
  
  if ! command -v exiftool &> /dev/null; then
    echo "‚ùå Error: ExifTool not installed. "
    read -p "Do you want to install it? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      brew install exiftool
    else
      return 1
    fi
  fi

  # Parse options
  # options are being set to default values here to avoid errors
  local convert=false
  local convert_format=""
  local rotate=false
  local rotate_degrees=0
  local sanitize=false
  local ocr=false
  local text=false
  local name=false
  local recursive=false
  local random_name=false
  local keep_original=false
  local files=()
  local options_provided=false
  
  # Parse all options first   
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c|--convert)
        convert=true
        options_provided=true
        shift
        # Check if next argument is a format
        if [[ "$1" =~ ^[a-zA-Z0-9]+$ && ! "$1" =~ ^- ]]; then
          convert_format="$1"
          shift
        fi
        ;;
      -r|--rotate)
        rotate=true
        options_provided=true
        shift
        if [[ "$1" =~ ^(90|180|270)$ ]]; then
          rotate_degrees="$1"
          shift
        else
          echo "‚ùå Error: Rotation must be 90, 180, or 270 degrees"
          return 1
        fi
        ;;
      -s|--sanitize)
        sanitize=true
        options_provided=true
        shift
        ;;
      -o|--ocr)
        ocr=true
        options_provided=true
        shift
        ;;
      -t|--text)
        text=true
        options_provided=true
        shift
        ;;
      -n|--name)
        name=true
        options_provided=true
        shift
        ;;
      -R|--recursive)
        recursive=true
        options_provided=true
        shift
        ;;
      --random)
        random_name=true
        options_provided=true
        shift
        ;;
      -k|--keep)
        keep_original=true
        options_provided=true
        shift
        ;;
      -*)
        echo "‚ùå Unknown option: $1"
        echo "Use 'handle_image --help' to see available options"
        return 1
        ;;
      *)
        # Add to files array
        files+=("$1")
        shift
        ;;
    esac
  done

  # If no options were explicitly provided, default to sanitize
  if [[ "$options_provided" == false && ${#files[@]} -gt 0 ]]; then
    echo "‚ÑπÔ∏è No options provided. Defaulting to sanitize EXIF data."
    sanitize=true
  fi

  # Check if we have any files to process
  if [[ ${#files[@]} -eq 0 ]]; then
    echo "‚ùå Error: No input files specified"
    return 1
  fi

  # Process each file or directory
  local processed_count=0
  local sanitized_count=0
  local failed_count=0
  
  for item in "${files[@]}"; do
    # Check if item is a directory
    if [[ -d "$item" ]]; then
      echo "üìÅ Processing directory: $item"
      
      # Find all image files in the directory
      local image_files=()
      local find_cmd="find \"$item\""
      
      if [[ "$recursive" != true ]]; then
        find_cmd+=" -maxdepth 1"
      fi
      
      find_cmd+=" -type f -regex \".*\.\(jpg\|jpeg\|png\|tiff\|gif\|bmp\|ico\|webp\)\""
      
      while IFS= read -r img_file; do
        if [[ -n "$img_file" ]]; then
          image_files+=("$img_file")
        fi
      done < <(eval $find_cmd)
      
      if [[ ${#image_files[@]} -eq 0 ]]; then
        echo "‚ö†Ô∏è No image files found in directory: $item"
        continue
      fi
      
      echo "üîç Found ${#image_files[@]} image files to process"
      
      # Process each image in the directory
      for img in "${image_files[@]}"; do
        process_single_image "$img"
        
        # Update counts based on return code
        if [[ $? -eq 0 ]]; then
          ((processed_count++))
          $sanitize && ((sanitized_count++))
        else
          ((failed_count++))
        fi
      done
      
    else
      # Process single file
      process_single_image "$item"
      
      # Update counts based on return code
      if [[ $? -eq 0 ]]; then
        ((processed_count++))
        $sanitize && ((sanitized_count++))
      else
        ((failed_count++))
      fi
    fi
  done
  
  # Show summary
  echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  echo "üìã Summary:"
  echo "  - $processed_count file(s) processed successfully"
  if [[ $sanitized_count -gt 0 ]]; then
    echo "  - $sanitized_count file(s) sanitized"
  fi
  if [[ $failed_count -gt 0 ]]; then
    echo "  - $failed_count file(s) failed to process"
  fi
  
  return 0
}

# PDF Handling
#using ghost script to convert pdfs to text that are still ocr
# gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile=same_name_with_no_spaces_and_no_special_chars.pdf original.pdf
alias ocr-pdf="handle_pdf -o"
alias extract-text="handle_pdf -t"
alias compress-pdf="handle_pdf -c"
alias convert-to-pdf="handle_pdf -C"
alias rotate-pdf="handle_pdf -r"
alias sanitize-pdf="handle_pdf -s"
alias metadata-pdf="handle_pdf -m"

handle_pdf() {
    # Create a forcecopy function that bypasses interactive prompts
    # This will be local to the function only
    local forcecopy() {
        command cp -f "$@"
    }
    
    # Temporarily unalias cp to avoid interactive prompts
    # Save the original alias if it exists
    local cp_alias_exists=false
    if alias cp &>/dev/null; then
        cp_alias_exists=true
        local cp_orig_alias=$(alias cp)
    fi
    # Unalias cp for this function
    unalias cp 2>/dev/null || true
    
    # Show help if no arguments or help option provided
    if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "üìÑ PDF Handler"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Usage: handle_pdf [options] file.pdf [output.pdf]"
        echo ""
        echo "Options:"
        echo "  -c, --compress       Compress the PDF file"
        echo "  -C, --convert-to-pdf Convert non pdf files to a pdfs"
        echo "  -j, --combine        Combine multiple PDFs into one"
        echo "  -e, --epub           Convert PDF to EPUB, if epub then convert to pdf"
        echo "  -o, --ocr            Apply OCR to make text searchable"
        echo "  -t, --text           Extract text from PDF"
        echo "  -s, --sanitize       Sanitize filename (remove spaces and special chars)"
        echo "  -m, --metadata       Display PDF metadata"
        echo "  -r, --rotate [90|180|270]  Rotate PDF by specified degrees"
        echo "  -q, --quiet          Suppress verbose output"
        echo "  -k, --keep           Keep original files (don't delete)"
        echo "  -p, --prompt         Prompt before overwriting or deleting"
        echo "  -n, --rename         Rename the file to the sanitized name"
        echo "  -f, --force          Force overwrite without prompting (default)"
        echo "  -h, --help           Show this help message"
        echo ""
        echo "Examples:"
        echo "  handle_pdf document.pdf                  # Process and replace original"
        echo "  handle_pdf -c large_file.pdf             # Compress PDF"
        echo "  handle_pdf -j file1.pdf file2.pdf        # Combine multiple PDFs into one"
        echo "  handle_pdf -o scan.pdf                   # Make PDF searchable with OCR"
        echo "  handle_pdf -t document.pdf > text.txt    # Extract text to file"
        echo "  handle_pdf -c -o -s document.pdf         # Compress, OCR, and sanitize"
        echo "  handle_pdf -k *.pdf                      # Process multiple PDFs, keep originals"
        echo "  handle_pdf -p \"*.pdf\"                   # Process with prompts for each file"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        return 0
    fi

    # Parse options
    local compress=false
    local combine=false
    local epub=false
    local ocr=false
    local extract_text=false
    local sanitize=false
    local show_metadata=false
    local rotate=false
    local rotate_degrees=0
    local quiet_mode=false
    local keep_originals=false
    local prompt_user=false
    local force_overwrite=true  # Default is to force overwrite
    local recursive=false       # Option for recursive directory processing
    local rename_file=false     # New option to control whether to rename with sanitized name
    local files=()
    
    # Parse all options first
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -c|--compress)
                compress=true
                shift
                ;;
            -C|--convert-to-pdf)
                convert_to_pdf=true
                shift
                ;;
            -j|--combine)
                combine=true
                shift
                ;;
            -e|--epub)
                epub=true
                shift
                ;;
            -o|--ocr)
                ocr=true
                shift
                ;;
            -t|--text)
                extract_text=true
                shift
                ;;
            -s|--sanitize)
                sanitize=true
                shift
                ;;
            -m|--metadata)
                show_metadata=true
                shift
                ;;
            -r|--rotate)
                #rotate the pdf
                rotate=true
                shift
                if [[ "$1" =~ ^(90|180|270)$ ]]; then
                    rotate_degrees="$1"
                    shift
                else
                    echo "‚ùå Error: Rotation must be 90, 180, or 270 degrees"
                    return 1
                fi
                ;;
            -q|--quiet)
                #quiet mode
                quiet_mode=true
                shift
                ;;
            -k|--keep)
                #keep the original file
                keep_originals=true
                shift
                ;;
            -p|--prompt)
                #prompt the user before overwriting or deleting the file
                prompt_user=true
                force_overwrite=false  # Disable force overwrite when prompt is enabled
                shift
                ;;
            -f|--force)
                #force overwrite of the file
                force_overwrite=true
                keep_originals=false  # Force mode enables deletion
                shift
                ;;
            -h|--help)
                #show help and exit
                handle_pdf
                return 0
                ;;
            -R|--recursive)     
                #recursive processing of pdfs in a directory
                recursive=true
                shift
                ;;
            -n|--rename)
                #rename the file to the sanitized name
                rename_file=true
                shift
                ;;
            -*)
                echo "‚ùå Unknown option: $1"
                echo "Use 'handle_pdf --help' to see available options"
                return 1
                ;;
            *)
                # Add to files array
                files+=("$1")
                shift
                ;;
        esac
    done
    
    # Check if we have any files to process
    if [[ ${#files[@]} -eq 0 ]]; then
        echo "‚ùå Error: No input files specified"
        return 1
    fi

    # Process each file or directory
    local processed_count=0
    local sanitized_count=0
    local failed_count=0
    local combined_count=0
    for item in "${files[@]}"; do
        # Check if item is a directory
        if [[ -d "$item" ]]; then
            if [[ "$quiet_mode" != true ]]; then
                echo "üìÅ Processing directory: $item"
            fi
            
            # Find all PDF files in the directory
            local dir_pdfs=()
            
            if [[ "$recursive" == true ]]; then
                # Find PDFs recursively
                while IFS= read -r pdf_file; do
                    dir_pdfs+=("$pdf_file")
                done < <(find "$item" -type f -iname "*.pdf" 2>/dev/null)
            else
                # Find PDFs in just this directory
                while IFS= read -r pdf_file; do
                    dir_pdfs+=("$pdf_file")
                done < <(find "$item" -maxdepth 1 -type f -iname "*.pdf" 2>/dev/null)
            fi
            
            if [[ ${#dir_pdfs[@]} -eq 0 ]]; then
                echo "‚ö†Ô∏è No PDF files found in directory: $item"
                continue
            fi
            
            if [[ "$quiet_mode" != true ]]; then
                echo "üîç Found ${#dir_pdfs[@]} PDF files to process"
            fi
            
            # Process each PDF in the directory
            for pdf in "${dir_pdfs[@]}"; do
                # Create a new argument list with the same options
                local pdf_args=()
                
                # Add all the option flags
                $compress && pdf_args+=("-c")
                $convert_to_pdf && pdf_args+=("-C")
                $epub && pdf_args+=("-e")
                $ocr && pdf_args+=("-o")
                $extract_text && pdf_args+=("-t")
                $sanitize && pdf_args+=("-s")
                $show_metadata && pdf_args+=("-m")
                $rotate && pdf_args+=("-r" "$rotate_degrees")
                $quiet_mode && pdf_args+=("-q")
                $keep_originals && pdf_args+=("-k")
                $prompt_user && pdf_args+=("-p")
                $force_overwrite && pdf_args+=("-f")
                $combine && pdf_args+=("-j")
                # Add the PDF file
                pdf_args+=("$pdf")
                
                # Process this PDF file
                handle_pdf "${pdf_args[@]}"
                
                # Update counts based on return code
                if [[ $? -eq 0 ]]; then
                    ((processed_count++))
                    $sanitize && ((sanitized_count++))
                else
                    ((failed_count++))
                fi
            done
        else
            # Check if file exists and is readable
            if [[ ! -e "$item" ]]; then
                echo "Warning: $item does not exist, skipping"
                continue
            fi
            
            if [[ ! -r "$item" ]]; then
                echo "Warning: $item is not readable, skipping"
                continue
            fi
            
            # Check if it's a PDF file
            if [[ "$item" =~ \.pdf$ ]]; then
                if [[ "$quiet_mode" != true ]]; then
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    echo "üìÑ Processing '$item'"
                fi
                
                # Get the sanitized filename
                local dirname=$(dirname "$item")
                local basename=$(basename "$item" .pdf)
                
                # Better sanitization: replace spaces with underscores first, then remove special chars
                local sanitized_name=""
                if [[ "$sanitize" == true ]]; then
                    #remove (Z-Library) from the filename first 
                    sanitized_name=$(echo "$basename" | sed 's/(Z-Library)//g')
                    # Replace spaces with underscores, then remove other special characters
                    sanitized_name=$(echo "$sanitized_name" | tr ' ' '_' | tr -cd '[:alnum:]._-')
                    
                else
                    sanitized_name="$basename"
                fi
                
                # Determine output filename based on rename_file flag
        local output_file=""
                if [[ "$rename_file" == true && "$sanitize" == true ]]; then
                    # Use sanitized name when rename is requested
            output_file="${dirname}/${sanitized_name}.pdf"
            
                    # Don't overwrite input file with same name
                    if [[ "$output_file" == "$item" ]]; then
                output_file="${dirname}/${sanitized_name}_clean.pdf"
            fi
        else
                    # Default: use the original filename
                    output_file="$item"
                    
                    # For processing, we need a temporary file with a different name
                    local temp_final="${temp_dir}/final.pdf"
                fi
                
                # Check if output file exists and handle accordingly
                if [[ -f "$output_file" && "$output_file" != "$item" ]]; then
                    if [[ "$prompt_user" == true ]]; then
                        echo -n "‚ö†Ô∏è File '$output_file' already exists. Overwrite? (y/n): "
                        read overwrite
                        if [[ ! $overwrite =~ ^[Yy]$ ]]; then
                            echo "üíæ Not overwritten, skipping file"
                            continue
                        fi
                    elif [[ "$force_overwrite" != true ]]; then
                        # If neither prompt nor force, skip
                        echo "‚ö†Ô∏è File '$output_file' already exists. Skipping (use -f to force overwrite)"
                        continue
                    fi
                    # Otherwise, with force_overwrite=true, we proceed without prompting
                fi
                
                # Create a temporary directory for processing
                local temp_dir=$(mktemp -d)
                trap 'rm -rf "$temp_dir"' EXIT
                
                # Temporary file for processing
                local temp_output="${temp_dir}/processed.pdf"
                
                # Process the PDF
                local processing_done=false
                
                if $show_metadata; then
                    echo "üìã PDF Metadata for '$item':"
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    pdfinfo "$item"
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                fi
                
                # First, copy the file to our temp location
                forcecopy "$item" "$temp_output"
                
                if $rotate; then
                    if [[ "$quiet_mode" != true ]]; then
                        echo "üîÑ Rotating PDF..."
                    fi
                    
                    local rotate_temp="${temp_dir}/rotated.pdf"
                    gs -q -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile="$rotate_temp" \
                       -c "<</Orientation $rotate_degrees>> setpagedevice" -f "$temp_output"
                    
                    if [[ -f "$rotate_temp" ]]; then
                        mv "$rotate_temp" "$temp_output"
                        processing_done=true
                    fi
                fi
                if $epub; then
                    if [[ "$quiet_mode" != true ]]; then
                        echo "üîÑ Converting PDF to EPUB..."
                    fi
                    
                    local epub_output="${dirname}/${sanitized_name}.epub"
                    
                    # Check if calibre's ebook-convert is installed
                    if command -v ebook-convert &> /dev/null; then
                        ebook-convert "$temp_output" "$epub_output"
                        
                        if [[ -f "$epub_output" ]]; then
                            if [[ "$quiet_mode" != true ]]; then
                                echo "‚úÖ EPUB conversion complete: '$epub_output'"
                            fi
                            processing_done=true
                        else
                            echo "‚ùå EPUB conversion failed"
                        fi
                    else
                        echo "‚ùå Error: ebook-convert (Calibre) is required for EPUB conversion but not installed"
                        echo "Please install Calibre: brew install --cask calibre"
                        return 1
                    fi
                fi
                if $ocr; then
                    if [[ "$quiet_mode" != true ]]; then
                        echo "üîÑ Applying OCR..."
                    fi
                    
                    local ocr_temp="${temp_dir}/ocr.pdf"
                    
                    # Check if ocr_files function exists
                    if typeset -f ocr_files > /dev/null; then
                        ocr_files "$temp_output" "$ocr_temp"
                    # Check if ocrmyfile function exists
                    elif typeset -f ocrmyfile > /dev/null; then
                        ocrmyfile "$temp_output" "$ocr_temp"
                    else
                        ocrmypdf --skip-text "$temp_output" "$ocr_temp"
                    fi
                    
                    if [[ -f "$ocr_temp" ]]; then
                        mv "$ocr_temp" "$temp_output"
                        processing_done=true
                    fi
                fi
                
                if $extract_text; then
                    if [[ "$quiet_mode" != true ]]; then
                        echo "üìù Extracting text..."
                    fi
                    pdftotext "$temp_output" -
                    processing_done=true
                fi
                
                if $compress; then
                    if [[ "$quiet_mode" != true ]]; then
                        echo "üóúÔ∏è Compressing PDF..."
                    fi
                    
                    local compress_temp="${temp_dir}/compressed.pdf"
                    gs -q -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -dPDFSETTINGS=/ebook \
                       -dCompatibilityLevel=1.4 -sOutputFile="$compress_temp" "$temp_output"
                    
                    if [[ -f "$compress_temp" ]]; then
                        mv "$compress_temp" "$temp_output"
                        processing_done=true
                    fi
                fi
                
                if $convert_to_pdf; then
                    if [[ "$quiet_mode" != true ]]; then
                        echo "üîÑ Converting to PDF..."
                    fi
                    
                    # Skip conversion for files that are already PDFs
                    if [[ "$item" =~ \.pdf$ ]]; then
                        if [[ "$quiet_mode" != true ]]; then
                            echo "‚ÑπÔ∏è File is already PDF, skipping conversion step"
                        fi
                        processing_done=true
                    else
                        # Call convert_to_pdf function only for non-PDF files
                        convert_to_pdf "$item"
                        
                        # Set processing_done based on success of convert_to_pdf
                        if [[ $? -eq 0 ]]; then
                            processing_done=true
                        fi
                    fi
                fi
                
                # Add this section immediately after to ensure a copy is made for renamed files
                # This ensures PDFs are properly copied with their new name before deletion
                if [[ "$rename_file" == true && "$item" =~ \.pdf$ && "$output_file" != "$item" ]]; then
                    if [[ "$quiet_mode" != true ]]; then
                        echo "üìÑ Creating renamed copy of PDF file..."
                    fi
                    
                    # Create a renamed copy
                    forcecopy "$item" "$output_file"
                    
                    # Mark as processed so it doesn't get reported as failed
                    processing_done=true
                fi
                
                # If sanitize is the only option and no processing was done, we still need to mark it
                if $sanitize && [[ "$processing_done" == false ]]; then
                    if [[ "$quiet_mode" != true ]]; then
                        echo "üîÑ Sanitizing filename..."
                    fi
                    processing_done=true
                    ((sanitized_count++))
                fi
                
                # Check if processing was successful
                if [[ -f "$temp_output" && "$processing_done" == true ]]; then
                    if [[ "$output_file" == "$item" ]]; then
                        # When replacing the original file, use a temporary final file first
                        forcecopy "$temp_output" "$temp_final"
                        
                        # Then replace the original
                        command mv -f "$temp_final" "$output_file"
                    else
                        # When using a different output name, use forcecopy to avoid prompts
                        forcecopy "$temp_output" "$output_file"
                        
                        # Handle original file (delete by default unless keep_originals is true)
                        if [[ "$prompt_user" == true ]]; then
                            echo -n "‚ùì Do you want to delete the original file '$item'? (y/n): "
                            read delete_original
                            if [[ $delete_original =~ ^[Yy]$ ]]; then
                                rm -f "$item"
                                if [[ "$quiet_mode" != true ]]; then
                                    echo "üóëÔ∏è Original file deleted."
                                fi
                            else
                                if [[ "$quiet_mode" != true ]]; then
                                    echo "üíæ Original file kept."
                                fi
                            fi
                        elif [[ "$keep_originals" == true ]]; then
                            if [[ "$quiet_mode" != true ]]; then
                                echo "üíæ Original file kept (--keep option)."
                            fi
                        else
                            # Default behavior: delete original without prompting
                            rm -f "$item"
                            if [[ "$quiet_mode" != true ]]; then
                                echo "üóëÔ∏è Original file deleted."
                            fi
                        fi
                    fi
                    
                    ((processed_count++))
                else
                    echo "‚ùå Processing failed for '$item'"
                    ((failed_count++))
                fi
            else
                echo "‚ö†Ô∏è Skipping non-PDF file: $item"
            fi
        fi
    done
    
    # Show summary
    if [[ "$quiet_mode" != true ]]; then
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìã Summary:"
        echo "  - $processed_count file(s) processed successfully"
        if [[ $sanitized_count -gt 0 ]]; then
            echo "  - $sanitized_count file(s) sanitized"
        fi
        if [[ $failed_count -gt 0 ]]; then
            echo "  - $failed_count file(s) failed to process"
        fi
    fi
    
    if [[ "$combine" == true ]]; then
        # Check if at least two PDF files are provided
        if [[ ${#files[@]} -lt 2 ]]; then
            echo "‚ùå Error: At least two PDF files are required to combine."
            return 1
        fi      
        # Generate a unique name for the combined PDF
        local combined_output="combined_$(date +%Y%m%d_%H%M%S).pdf"  # Use a timestamp for uniqueness
        echo "üì¶ Combining PDFs into: $combined_output"
        
        # Use Ghostscript to combine the PDFs
        gs -q -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile="$combined_output" "${files[@]}" || {
            echo "‚ùå Failed to combine PDFs."
            return 1
        }

        ((combined_count++))
        echo "‚úÖ Combined $combined_count PDF(s) successfully."
        return 0
    fi
    
    # At the end of the function, restore the original alias if it existed
    if $cp_alias_exists; then
        eval "$cp_orig_alias"
    fi
    
    return 0
}

# Convert files to PDF
# Alias for quick access
alias to-pdf="convert_to_pdf"
alias pdf-convert="convert_to_pdf"
alias to_pdf="convert_to_pdf"

convert_to_pdf() {
    # Add LibreOffice to PATH if not already set
    if [[ ! "$PATH" == *"/Applications/LibreOffice.app/Contents/MacOS"* ]]; then
        export PATH="/Applications/LibreOffice.app/Contents/MacOS:$PATH"
    fi

    # Show help if no arguments or help option provided
    if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "üîÑ Convert to PDF"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Usage: convert_to_pdf [options] file [file2 file3 ...]"
        echo ""
        echo "Options:"
        echo "  -c, --combine         Combine all files into a single PDF"
        echo "  -o, --output [name]   Specify output filename (for combine mode)"
        echo "  -q, --quality [level] Set quality level (default: high)"
        echo "                        Levels: low, medium, high, print"
        echo "  -s, --sanitize        Sanitize PDF (remove metadata/EXIF data)"
        echo "  -n, --name            Sanitize output filenames (remove spaces/special chars)"
        echo "  -r, --recursive       Process all files in directories recursively"
        echo "  -k, --keep            Keep original files (default behavior)"
        echo "  -f, --force           Force overwrite AND delete original files"
        echo "  -v, --verbose         Show detailed processing information"
        echo "  -h, --help            Show this help message"
        echo ""
        echo "Examples:"
        echo "  convert_to_pdf document.docx                # Convert to document.pdf"
        echo "  convert_to_pdf -c *.pptx                    # Combine all PPTX into one PDF"
        echo "  convert_to_pdf -c -o presentation.pdf *.jpg # Combine images into presentation.pdf"
        echo "  convert_to_pdf -r -n Documents/             # Convert all files in directory"
        echo "  convert_to_pdf -s -k photo.jpg              # Sanitize metadata, keep original"
        echo ""
        echo "Supported file types: Office documents (docx, xlsx, pptx), images (jpg, png, etc.),"
        echo "text files (txt, md), HTML, and more."
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        return 0
    fi

    # Check if required tools are installed
    local missing_tools=()
    local install_cmd=""
    
    # Check for LibreOffice (for office documents)
    if ! command -v soffice &> /dev/null; then
        missing_tools+=("libreoffice")
    fi
    
    # Check for ImageMagick (for images)
    if ! command -v convert &> /dev/null; then
        missing_tools+=("imagemagick")
    fi
    
    # Check for Ghostscript (for combining PDFs)
    if ! command -v gs &> /dev/null; then
        missing_tools+=("ghostscript")
    fi
    
    # Check for ExifTool (for metadata sanitization)
    if ! command -v exiftool &> /dev/null; then
        missing_tools+=("exiftool")
    fi
    
    # Prompt to install missing tools
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        echo "‚ö†Ô∏è Some tools are missing: ${missing_tools[*]}"
        echo "These tools may be needed depending on the file types you're converting."
        
        # Use a simple y/n prompt that won't cause a coprocess error
        echo -n "Do you want to install them? (y/n): "
        read answer
        
        if [[ "$answer" == "y" || "$answer" == "Y" ]]; then
            for tool in "${missing_tools[@]}"; do
                echo "üì¶ Installing $tool..."
                case "$tool" in
                    libreoffice)
                        brew install --cask libreoffice
                        ;;
                    imagemagick)
                        brew install imagemagick
                        ;;
                    ghostscript)
                        brew install ghostscript
                        ;;
                    exiftool)
                        brew install exiftool
                        ;;
                esac
            done
        else
            echo "‚ö†Ô∏è Some conversions may not work without required tools."
        fi
    fi
    
    # Special case for Office documents
    local has_office_tool=false
    if command -v soffice &> /dev/null; then
        has_office_tool=true
    fi
    
    # Parse options
    local combine=false
    local output_file=""
    local quality="high"
    local sanitize=false
    local sanitize_filename=false
    local recursive=false
    local keep_originals=true  # Default to keep originals
    local prompt_user=false
    local force_overwrite=false
    local verbose=false
    local files=()
    
    # Parse all options first
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -c|--combine)
                combine=true
                shift
                ;;
            -o|--output)
                shift
                if [[ -n "$1" && ! "$1" =~ ^- ]]; then
                    output_file="$1"
                    shift
                else
                    echo "‚ùå Error: --output requires a filename"
                    return 1
                fi
                ;;
            -q|--quality)
                shift
                if [[ "$1" =~ ^(low|medium|high|print)$ ]]; then
                    quality="$1"
                    shift
                else
                    echo "‚ùå Error: Quality must be low, medium, high, or print"
                    return 1
                fi
                ;;
            -s|--sanitize)
                sanitize=true
                shift
                ;;
            -n|--name)
                sanitize_filename=true
                shift
                ;;
            -r|--recursive)
                recursive=true
                shift
                ;;
            -k|--keep)
                keep_originals=true
                shift
                ;;
            -p|--prompt)
                prompt_user=true
                force_overwrite=false
                shift
                ;;
            -f|--force)
                force_overwrite=true
                keep_originals=false  # Force mode enables deletion
                shift
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -h|--help)
                convert_to_pdf
                return 0
                ;;
            -*)
                echo "‚ùå Unknown option: $1"
                echo "Use 'convert_to_pdf --help' to see available options"
                return 1
                ;;
            *)
                # Add to files array
                files+=("$1")
                shift
                ;;
        esac
    done
    
    # Check if we have any files to process
    if [[ ${#files[@]} -eq 0 ]]; then
        echo "‚ùå Error: No input files specified"
        return 1
    fi
    
    # Set quality parameters for different tools
    local convert_quality=""
    local gs_quality=""
    
    case "$quality" in
        low)
            convert_quality="-quality 75"
            gs_quality="-dPDFSETTINGS=/ebook"
            ;;
        medium)
            convert_quality="-quality 85"
            gs_quality="-dPDFSETTINGS=/ebook"
            ;;
        high)
            convert_quality="-quality 95"
            gs_quality="-dPDFSETTINGS=/prepress"
            ;;
        print)
            convert_quality="-quality 100"
            gs_quality="-dPDFSETTINGS=/printer"
            ;;
    esac
    
    # Temporary directory for processing
    local temp_dir=$(mktemp -d)
    trap 'rm -rf "$temp_dir"' EXIT
    
    # Build file list including recursive search
    local all_files=()
    for item in "${files[@]}"; do
        if [[ -d "$item" ]]; then
            if [[ "$verbose" == true ]]; then
                echo "üìÅ Processing directory: $item"
            fi
            
            # Define find options based on recursion setting
            local find_depth=""
            if [[ "$recursive" != true ]]; then
                find_depth="-maxdepth 1"
            fi
            
            # Find all convertible files in the directory
            while IFS= read -r found_file; do
                if [[ -n "$found_file" && -f "$found_file" ]]; then
                    all_files+=("$found_file")
                fi
            done < <(find "$item" $find_depth -type f -not -name "*.pdf" 2>/dev/null)
            
            if [[ ${#all_files[@]} -eq 0 ]]; then
                echo "‚ö†Ô∏è No convertible files found in directory: $item"
            elif [[ "$verbose" == true ]]; then
                echo "üîç Found ${#all_files[@]} files to process"
            fi
        elif [[ -f "$item" ]]; then
            all_files+=("$item")
        else
            echo "‚ö†Ô∏è Skipping: $item (not a file or directory)"
        fi
    done
    
    if [[ ${#all_files[@]} -eq 0 ]]; then
        echo "‚ùå Error: No valid files to convert"
        return 1
    fi
    
    # Prepare for combined PDF if requested
    local pdf_files_to_combine=()
    local combined_output=""
    
    if [[ "$combine" == true ]]; then
        if [[ -n "$output_file" ]]; then
            combined_output="$output_file"
        else
            # Generate a unique timestamped filename for combined output
            combined_output="combined_$(date +%Y%m%d_%H%M%S).pdf"
        fi
        
        if [[ "$verbose" == true ]]; then
            echo "üì¶ Will combine all files into: $combined_output"
        fi
    fi
    
    # Process each file
    local processed_count=0
    local failed_count=0
    local sanitized_count=0
    
    for file in "${all_files[@]}"; do
        # Skip PDF files that are already in PDF format
        if [[ "$file" =~ \.pdf$ ]]; then
            if [[ "$combine" == true ]]; then
                pdf_files_to_combine+=("$file")
                ((processed_count++))
            else
                echo "‚ö†Ô∏è Skipping already PDF file: $file"
            fi
            continue
        fi
        
        # Get file info
        local dirname=$(dirname "$file")
        local basename=$(basename "$file")
        local extension="${basename##*.}"
        local filename="${basename%.*}"
        
        # Sanitize filename if requested
        if [[ "$sanitize_filename" == true ]]; then
            filename=$(echo "$filename" | tr ' ' '_' | tr -cd '[:alnum:]._-')
        fi
        
        # Determine output file
        local output_pdf=""
        if [[ "$combine" == true ]]; then
            # For combined mode, each file is converted to a temporary PDF
            output_pdf="${temp_dir}/${filename}.pdf"
        else
            # For individual mode, each file gets its own output PDF
            output_pdf="${dirname}/${filename}.pdf"
        fi
        
        # Check if output file exists (for non-combine mode)
        if [[ "$combine" != true && -f "$output_pdf" ]]; then
            if [[ "$prompt_user" == true ]]; then
                echo -n "‚ö†Ô∏è File '$output_pdf' already exists. Overwrite? (y/n): "
                read overwrite
                if [[ ! $overwrite =~ ^[Yy]$ ]]; then
                    echo "üíæ Not overwritten, skipping file"
                    continue
                fi
            elif [[ "$force_overwrite" != true ]]; then
                # If neither prompt nor force, skip
                echo "‚ö†Ô∏è File '$output_pdf' already exists. Skipping (use -f to force overwrite)"
                continue
            fi
            # Otherwise, with force_overwrite=true, we proceed without prompting
        fi
        
        if [[ "$verbose" == true ]]; then
            echo "üîÑ Converting: $file"
        fi
        
        # Create a temporary file for processing
        local temp_output="${temp_dir}/temp_processing.${extension}"
        forcecopy "$file" "$temp_output"
        
        # Sanitize metadata if requested
        if [[ "$sanitize" == true ]]; then
            if [[ "$verbose" == true ]]; then
                echo "üßπ Sanitizing metadata..."
                if [[ "$extension" =~ ^(jpg|jpeg|png|tiff|gif|webp)$ ]] && command -v exiftool &> /dev/null; then
                    echo "Original metadata:"
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    exiftool "$temp_output" | grep -v "File Name" | grep -v "Directory" | grep -v "File Size" | grep -v "File Modification Date/Time"
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                fi
            fi
            
            # Apply sanitization based on file type
            if [[ "$extension" =~ ^(jpg|jpeg|png|tiff|gif|webp)$ ]] && command -v exiftool &> /dev/null; then
                # For images, use ExifTool to strip metadata
                exiftool -overwrite_original -all= -Orientation "$temp_output"
                ((sanitized_count++))
                
                if [[ "$verbose" == true ]]; then
                    echo "Metadata after sanitization:"
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    exiftool "$temp_output"
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                fi
            elif [[ "$extension" =~ ^(docx?|xlsx?|pptx?|odt|ods|odp)$ ]] && command -v soffice &> /dev/null; then
                # For Office documents, we'll sanitize during the PDF conversion process
                # (metadata is typically not transferred during conversion)
                ((sanitized_count++))
            fi
        fi
        
        # Convert file based on its type
        if [[ "$extension" =~ ^(docx?|xlsx?|pptx?|odt|ods|odp)$ ]]; then
            # Office documents - use LibreOffice
            if command -v soffice &> /dev/null; then
                if [[ "$verbose" == true ]]; then
                    echo "üìÑ Converting Office document with LibreOffice..."
                fi
                
                local temp_output_dir="${temp_dir}/libreoffice_output"
                mkdir -p "$temp_output_dir"
                
                # Convert to PDF using LibreOffice (remove error suppression)
                echo "Attempting conversion of: $file"
                soffice --headless --convert-to pdf --outdir "$temp_output_dir" "$temp_output"
                
                # Check if conversion was successful
                local converted_file="${temp_output_dir}/${filename}.pdf"
                if [[ ! -f "$converted_file" ]]; then
                    # Fallback: Try to find any PDF in the output directory
                    converted_file=$(find "$temp_output_dir" -name '*.pdf' -print -quit)
                fi
                
                if [[ -f "$converted_file" ]]; then
                    forcecopy "$converted_file" "$output_pdf"
                    
                    if [[ "$combine" == true ]]; then
                        pdf_files_to_combine+=("$output_pdf")
                    fi
                    
                    ((processed_count++))
                else
                    echo "‚ùå LibreOffice failed to convert: $file"
                    echo "Debug info:"
                    echo "Temp dir contents:"
                    ls -la "$temp_output_dir"
                    ((failed_count++))
                    continue
                fi
            else
                echo "‚ùå Cannot convert Office document without LibreOffice: $file"
                echo "üì¶ Please install LibreOffice with: brew install --cask libreoffice"
                ((failed_count++))
                continue
            fi
        elif [[ "$extension" =~ ^(jpg|jpeg|png|gif|bmp|tiff|webp)$ ]]; then
            # Images - use ImageMagick
            if command -v convert &> /dev/null; then
                if [[ "$verbose" == true ]]; then
                    echo "üñºÔ∏è Converting image with ImageMagick..."
                fi
                
                # Convert image to PDF
                convert $convert_quality "$temp_output" "$output_pdf"
                
                if [[ -f "$output_pdf" ]]; then
                    if [[ "$combine" == true ]]; then
                        pdf_files_to_combine+=("$output_pdf")
                    fi
                    
                    ((processed_count++))
                else
                    echo "‚ùå Failed to convert: $file"
                    ((failed_count++))
                    continue
                fi
            else
                echo "‚ùå Cannot convert image without ImageMagick: $file"
                echo "üì¶ Please install ImageMagick with: brew install imagemagick"
                ((failed_count++))
                continue
            fi
        elif [[ "$extension" =~ ^(html?|htm)$ ]]; then
            # HTML - use ImageMagick or Chrome headless as alternative to wkhtmltopdf
            if [[ "$verbose" == true ]]; then
                echo "üåê Converting HTML file..."
            fi
            
            if command -v convert &> /dev/null; then
                # Use ImageMagick for conversion
                if [[ "$verbose" == true ]]; then
                    echo "üñºÔ∏è Converting HTML with ImageMagick..."
                fi
                
                # Convert HTML to PDF
                convert $convert_quality "$temp_output" "$output_pdf"
                
                if [[ -f "$output_pdf" ]]; then
                    if [[ "$combine" == true ]]; then
                        pdf_files_to_combine+=("$output_pdf")
                    fi
                    
                    ((processed_count++))
                else
                    echo "‚ùå Failed to convert HTML: $file"
                    ((failed_count++))
                    continue
                fi
            elif command -v "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" &> /dev/null; then
                # Use Chrome headless as an alternative
                if [[ "$verbose" == true ]]; then
                    echo "üåê Converting HTML with Chrome headless..."
                fi
                
                # Use Chrome to convert HTML to PDF
                "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" \
                    --headless --disable-gpu --print-to-pdf="$output_pdf" \
                    "file://${temp_output}" &> /dev/null
                
                if [[ -f "$output_pdf" ]]; then
                    if [[ "$combine" == true ]]; then
                        pdf_files_to_combine+=("$output_pdf")
                    fi
                    
                    ((processed_count++))
                else
                    echo "‚ùå Failed to convert HTML: $file"
                    ((failed_count++))
                    continue
                fi
            else
                echo "‚ùå Cannot convert HTML without ImageMagick or Chrome"
                echo "üì¶ Please install ImageMagick with: brew install imagemagick"
                ((failed_count++))
                continue
            fi
        elif [[ "$extension" =~ ^(txt|md|markdown|csv|log|json|xml)$ ]]; then
            # Text files - use a combination of tools
            if [[ "$verbose" == true ]]; then
                echo "üìù Converting text file..."
            fi
            
            # Create a temporary HTML file
            local temp_html="${temp_dir}/${filename}.html"
            
            echo "<html><head><title>$filename</title></head><body><pre>" > "$temp_html"
            cat "$temp_output" >> "$temp_html"
            echo "</pre></body></html>" >> "$temp_html"
            
            local conversion_success=false
            
            # Try different tools in order of preference
            if command -v convert &> /dev/null; then
                convert $convert_quality "$temp_html" "$output_pdf"
                [[ -f "$output_pdf" ]] && conversion_success=true
            elif command -v "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" &> /dev/null; then
                # Use Chrome headless as an alternative
                "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" \
                    --headless --disable-gpu --print-to-pdf="$output_pdf" \
                    "file://${temp_html}" &> /dev/null
                [[ -f "$output_pdf" ]] && conversion_success=true
            elif command -v soffice &> /dev/null; then
                # Use LibreOffice as last resort
                local temp_output_dir="${temp_dir}/libreoffice_output"
                mkdir -p "$temp_output_dir"
                soffice --headless --convert-to pdf --outdir "$temp_output_dir" "$temp_output" &> /dev/null
                local converted_file="${temp_output_dir}/${filename}.pdf"
                if [[ -f "$converted_file" ]]; then
                    forcecopy "$converted_file" "$output_pdf"
                    conversion_success=true
                fi
            fi
            
            # Check if conversion was successful
            if [[ "$conversion_success" == true ]]; then
                if [[ "$combine" == true ]]; then
                    pdf_files_to_combine+=("$output_pdf")
                fi
                ((processed_count++))
            else
                echo "‚ùå Cannot convert text file. Please install ImageMagick with: brew install imagemagick"
                ((failed_count++))
                continue
            fi
        else
            # Try to handle other file types with LibreOffice as a fallback
            if command -v soffice &> /dev/null; then
                if [[ "$verbose" == true ]]; then
                    echo "üîÑ Attempting to convert with LibreOffice..."
                fi
                
                local temp_output_dir="${temp_dir}/libreoffice_output"
                mkdir -p "$temp_output_dir"
                
                # Convert to PDF using LibreOffice
                soffice --headless --convert-to pdf --outdir "$temp_output_dir" "$temp_output" &> /dev/null
                
                # Check if conversion was successful
                local converted_file="${temp_output_dir}/${filename}.pdf"
                if [[ -f "$converted_file" ]]; then
                    forcecopy "$converted_file" "$output_pdf"
                    
                    if [[ "$combine" == true ]]; then
                        pdf_files_to_combine+=("$output_pdf")
                    fi
                    
                    ((processed_count++))
                else
                    echo "‚ùå Failed to convert: $file"
                    ((failed_count++))
                    continue
                fi
            else
                echo "‚ùå Unsupported file type: $extension (file: $file)"
                ((failed_count++))
                continue
            fi
        fi
        
        # Apply additional PDF sanitization if requested
        if [[ "$sanitize" == true && -f "$output_pdf" ]]; then
            if command -v exiftool &> /dev/null; then
                if [[ "$verbose" == true ]]; then
                    echo "üßπ Sanitizing PDF metadata..."
                fi
                
                # Remove all metadata from the PDF
                exiftool -overwrite_original -all:all= "$output_pdf" &> /dev/null
            fi
            
            # For more thorough PDF sanitization, use Ghostscript
            if command -v gs &> /dev/null; then
                local sanitized_pdf="${temp_dir}/sanitized.pdf"
                
                # Use Ghostscript to create a clean copy without metadata
                gs -q -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite \
                   -dCompatibilityLevel=1.4 \
                   -dPDFA=0 -dPrinted=false \
                   -sOutputFile="$sanitized_pdf" \
                   "$output_pdf" &> /dev/null
                
                if [[ -f "$sanitized_pdf" ]]; then
                    forcecopy "$sanitized_pdf" "$output_pdf"
                fi
            fi
        fi
        
        # Handle original file
        if [[ "$combine" != true && -f "$output_pdf" ]]; then
            if [[ "$verbose" == true ]]; then
                echo "‚úÖ Converted: $file -> $output_pdf"
            else
                echo "‚úÖ Converted: $file -> $output_pdf"
            fi
            
            # Handle original file
            if [[ "$keep_originals" != true ]]; then
                if [[ "$prompt_user" == true ]]; then
                    echo -n "‚ùì Delete original file '$file'? (y/n): "
                    read delete_original
                    if [[ $delete_original =~ ^[Yy]$ ]]; then
                        rm -f "$file"
                        if [[ "$verbose" == true ]]; then
                            echo "üóëÔ∏è Original file deleted"
                        fi
                    fi
                else
                    rm -f "$file"
                    if [[ "$verbose" == true ]]; then
                        echo "üóëÔ∏è Original file deleted"
                    fi
                fi
            elif [[ "$verbose" == true ]]; then
                echo "üíæ Original file kept"
            fi
        fi
    done
    
    # Combine PDFs if requested
    if [[ "$combine" == true && ${#pdf_files_to_combine[@]} -gt 0 ]]; then
        if [[ "$verbose" == true ]]; then
            echo "üì¶ Combining ${#pdf_files_to_combine[@]} PDFs into: $combined_output"
        fi
        
        if command -v gs &> /dev/null; then
            # Use Ghostscript to combine the PDFs
            gs -q -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite $gs_quality \
                -sOutputFile="$combined_output" "${pdf_files_to_combine[@]}" || {
                echo "‚ùå Failed to combine PDFs."
                return 1
            }
            
            # Apply sanitization to combined PDF if requested
            if [[ "$sanitize" == true && -f "$combined_output" ]]; then
                if command -v exiftool &> /dev/null; then
                    if [[ "$verbose" == true ]]; then
                        echo "üßπ Sanitizing combined PDF metadata..."
                    fi
                    
                    # Remove all metadata from the PDF
                    exiftool -overwrite_original -all:all= "$combined_output" &> /dev/null
                fi
            fi
            
            if [[ -f "$combined_output" ]]; then
                echo "‚úÖ Created combined PDF: $combined_output"
                
                # Handle original files if they weren't already handled
                if [[ "$keep_originals" != true ]]; then
                    for file in "${all_files[@]}"; do
                        if [[ "$prompt_user" == true ]]; then
                            echo -n "‚ùì Delete original file '$file'? (y/n): "
                            read delete_original
                            if [[ $delete_original =~ ^[Yy]$ ]]; then
                                rm -f "$file"
                            fi
                        else
                            rm -f "$file"
                        fi
                    done
                    
                    if [[ "$verbose" == true ]]; then
                        echo "üóëÔ∏è Original files deleted"
                    fi
                elif [[ "$verbose" == true ]]; then
                    echo "üíæ Original files kept"
                fi
            else
                echo "‚ùå Failed to create combined PDF"
                return 1
            fi
        else
            echo "‚ùå Cannot combine PDFs without Ghostscript"
            echo "üì¶ Please install Ghostscript with: brew install ghostscript"
            return 1
        fi
    fi
    
    # Show summary
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìã Summary:"
    echo "  - $processed_count file(s) processed successfully"
    if [[ $sanitized_count -gt 0 ]]; then
        echo "  - $sanitized_count file(s) sanitized"
    fi
    if [[ "$combine" == true && -f "$combined_output" ]]; then
        echo "  - Created combined PDF: $combined_output"
    fi
    if [[ $failed_count -gt 0 ]]; then
        echo "  - $failed_count file(s) failed to process"
    fi
    
    return 0
}
