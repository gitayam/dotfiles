# ----------------------
# Git Aliases
# ----------------------
alias gita="git_add"
alias gitcg="git_commit"
alias gitp="git push"
alias gitpl="git pull"
alias gitco="git checkout"
alias gitcb="git checkout -b"
alias gitlog="git log --oneline --graph --all"

# ----------------------
# Git Functions
# ----------------------
git_commit() {
    if [[ -z "$1" ]]; then
        echo "No commit message provided. Opening editor for interactive commit message."
        git commit
    else
        git commit -m "$1"
    fi
}

git_add() {
    if [[ -z "$1" ]]; then
        echo "No files specified. Defaulting to 'git add .'"
        git add .
    else
        git add "$@"
    fi
}
# ----------------------
# Navigation and File Management Aliases
# ----------------------
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias mkdir="mkdir -p"
alias rmr="rm -rf"
alias untar="tar -zxvf"

# ----------------------
# Security Tools Aliases
# ----------------------
alias scan="sudo nmap -sS -Pn"
alias json="jq ."
alias http="curl -I"
alias ports="netstat -tuln"

# ----------------------
# Helper Functions
# ----------------------
# Colorize the `ls` output and setup useful aliases
export LS_OPTIONS='--color=auto'
alias ls='ls $LS_OPTIONS'
alias ll='ls -lh $LS_OPTIONS'        # Detailed list view
alias la='ls -lha $LS_OPTIONS'       # Show hidden files
alias l='ls -lA $LS_OPTIONS'         # Short list view with hidden files
alias lt='ls -strhal $LS_OPTIONS'       # Sort by date, most recent last

# Safe aliases to prevent accidental file overwrites or deletions
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Navigation Function
# Fast directory navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# change dir and List Directory Contents
cdl() {
  if [ -n "$1" ]; then
    cd "$1" && ll
  else
    cd ~ && ll
  fi
}

# create backup of a file or directory
backup() {
  # human readiable date and time with backup
  # check if dir or files exists
  backup_name=".bak_$(date +%Y-%m-%d_%H-%M-%S)"
  # check if rsync is installed if not set copy command to cp
  if command -v rsync &> /dev/null; then
    COPY_CMD="rsync"
  else
    COPY_CMD="cp"
  fi
  # take files, dictionaries as arguments get full path as needed many args possible
  
  for file in "$@"; do
    if [ -f "$file" ]; then
      $COPY_CMD "$file" "$file$backup_name"
      echo "Backup of $file created as $file$backup_name"
    elif [ -d "$file" ]; then
      $COPY_CMD -r "$file" "$file$backup_name"
      echo "Backup of $file created as $file$backup_name"
    else
      echo "$file does not exist"
    fi
  done

}
# Searching 
# Grep aliases and functions
alias grep='grep -i --color=auto "$@"' # Ignore case and colorize output and pass all arguments to grep in quotes
alias grepv='grep -vi --color=auto' # Ignore case, invert match, and colorize output

# Find aliases and functions
alias findf='find . -type f -name' # Find files by name
alias findd='find . -type d -name' # Find directories by name
alias findex=''

# Nano Editor settings
alias nanozsh='nano ~/.zshrc'     # Open the bashrc file in nano
alias reset='reset_file'          # Custom function to erase a file content then open with nano

# Nano Functions
reset_file() {
  # Reset the file content to an empty string
  # use the backup function to create a backup of the file before erasing
  backup "$1"
  echo "" > "$1"
  echo "File content erased."
  nano "$1"
  # prompt user to restore backup file if needed, else delete
  read -p "Do you want to delete the backup file? (y/n): " delete_backup
  if [ "$delete_backup" == "y" ]; then
    rm $file$backup_name # from the backup function
    echo "Backup file deleted."
  fi

}

# Python Aliases 
pyenv(){
  python3 -m venv env  # Create the virtual environment
  source env/bin/activate  # Activate the virtual environment (on Linux/Mac)
}

pyserver(){
  #get local ip
  local_ip=$(hostname -I | awk '{print $1}')
  # path for the server else use current dir
  # if multiple files passed in arg then create tmp dir and add those passed files or dir via ln to the temp server dir
  if [ -n "$1" ]; then
    # create temp dir
    mkdir -p /tmp/pyserver
    # add files or dir to the temp dir
    #create python server for the dir
    for file in "$@"; do
      ln -s "$file" /tmp/pyserver
    done
    # change dir to the temp dir
    cd /tmp/pyserver
  fi
}
# Docker Aliases
alias dc="docker compose"
alias docker-compose="dc"
alias dcu="dc pull && dc up -d"
alias dcr="dc down && dc up -d"
alias dcp="dc pull"
alias d="docker"
alias dps="d ps"
alias dbash="d exec -it $1 /bin/bash"
alias dsh="d exec -it $1 /bin/sh"


# Networking shortcuts
alias ports='netstat -tulanp'  # List open ports
alias myip='curl ifconfig.me'  # Check external IP address

# Disk usage shortcuts
alias du='du -h --max-depth=1'  # Show disk usage in human-readable format
alias df='df -h'                # Show free disk space in human-readable format


# General Help Checker
show_help() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        echo "$2"
        return 0
    fi
}

# Menu with all functions in ~/.zsh_aliases and ~/.mac_functions.sh
helpmenu() {
    echo "Help Menu:"
    echo "----------"

    for file in ~/.zsh_aliases ~/.mac_functions.sh; do
        if [ -f "$file" ]; then
            echo "Functions in $file:"
            while IFS= read -r line; do
                if [[ "$line" =~ ^[a-zA-Z_][a-zA-Z0-9_]*\(\)\ *\{ ]]; then
                    echo "  - ${line%%()*}"
                fi
            done < "$file"
        else
            echo "No file found at $file"
        fi
        echo ""
    done
}

# ----------------------
# GitHub Repository Management
# ----------------------

create_repo() {
    show_help "$1" "Usage: create_repo repo_name"

    if ! command -v gh &> /dev/null; then
        echo "Error: GitHub CLI 'gh' is not installed."
        return 1
    fi

    local repo_name=$1
    local base_dir="$HOME/Documents/Git"
    mkdir -p "$base_dir"

    gh repo create "$repo_name" --private || return 1
    git clone "https://github.com/$(gh api user | jq -r '.login')/$repo_name.git" "$base_dir/$repo_name" || return 1
    cd "$base_dir/$repo_name" || return 1
    echo "# $repo_name" > README.md
    git add README.md
    git commit -m "Initial commit"
    git branch -M main
    git push -u origin main

    echo "Repository $repo_name created and initialized successfully in $base_dir."
}

# ----------------------
# Python Virtual Environment Management
# ----------------------
# Python Aliases 
pyenv(){
  python3 -m venv env  # Create the virtual environment
  source env/bin/activate  # Activate the virtual environment (on Linux/Mac)
  pip install --upgrade pip  # Upgrade pip
  pip install -r requirements.txt  # Install dependencies
}

pyserver(){
  #get local ip
  local_ip=$(hostname -I | awk '{print $1}')
  # path for the server else use current dir
  # if multiple files passed in arg then create tmp dir and add those passed files or dir via ln to the temp server dir
  if [ -n "$1" ]; then
    # create temp dir
    mkdir -p /tmp/pyserver
    # add files or dir to the temp dir
    #create python server for the dir
    for file in "$@"; do
      ln -s "$file" /tmp/pyserver
    done
    # change dir to the temp dir
    cd /tmp/pyserver
  fi
}

# ----------------------
# MAC Address Management
# ----------------------

gen_mac_addr() {
    local mac=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    echo "$mac"
}

change_mac_menu() {
    echo "Choose an option:"
    echo "1. Set a specific MAC address"
    echo "2. Set a random MAC address"
    echo "3. Restore original MAC address"
    echo -n "Enter your choice (1/2/3): "
    read choice

    case $choice in
        1)
            echo -n "Enter the new MAC address (e.g., E6:B8:BA:D2:41:07): "
            read mac_address
            echo -n "Enter the name of the new network location: "
            read location_name
            change_mac_address "$mac_address" "$location_name"
            ;;
        2)
            echo -n "Enter the name of the new network location: "
            read location_name
            mac_address=$(gen_mac_addr)
            change_mac_address "$mac_address" "$location_name"
            ;;
        3)
            restore_original_mac
            ;;
        *)
            echo "Invalid choice. Exiting."
            ;;
    esac
}

# ----------------------
# Matrix Setup
# ----------------------

matrix_setup() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        # show help
        echo "Usage: matrix_setup {full|1|normal|restart} [vars_directory_path]"
        return 0
    fi

    if ! command -v ansible-playbook &> /dev/null; then
        # show error
        echo "Error: 'ansible-playbook' is not installed."
        return 1
    fi
    # set mode to normal if no mode is passed
    local mode="${1:-normal}"
    # set vars file to the default path if no path is passed $HOME/Documents/Git/matrix-docker-ansible-deploy/inventory/host_vars/matrix.irregularchat.com
    local vars_file="${2:-$HOME/Documents/Git/matrix-docker-ansible-deploy/inventory/host_vars/matrix.irregularchat.com}"
    # set to ../.. above the vars file
    local hosts_file="${vars_file%/*}/../hosts"
    # example for the default vars file the hosts file is $HOME/Documents/Git/matrix-docker-ansible-deploy/inventory/hosts
    
    # show error if hosts file does not exist
    if [[ ! -f "$hosts_file" ]]; then
        echo "Error: Hosts file not found at $hosts_file"
        return 1
    fi
    # run the case statement
    case "$mode" in
        full|1)
            git pull && sudo make roles
            sudo ansible-playbook -i "$hosts_file" setup.yml --tags=install-all,setup-all,ensure-matrix-users-created,start || return 1
            ;;
        normal)
            git pull && sudo make roles
            sudo ansible-playbook -i "$hosts_file" setup.yml --tags=setup-all,start || return 1
            ;;
        restart)
            sudo ansible-playbook -i "$hosts_file" setup.yml --tags=restart || return 1
            ;;
        *)
            echo "Usage: matrix_setup {full|1|normal|restart} [hosts_file_path]"
            return 1
            ;;
    esac
}

# ----------------------
# Matrix User Setup
# ----------------------

matrix_setup_user() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: matrix_setup_user username [password] [admin] [device_id] [hosts_file_path]"
        return 0
    fi

    if ! command -v curl &> /dev/null || ! command -v ansible-playbook &> /dev/null; then
        echo "Error: Required commands 'curl' or 'ansible-playbook' are not installed."
        return 1
    fi

    local username="$1"
    local password="${2:-$(openssl rand -base64 18)}"
    local admin="${3:-no}"
    local device_id="${4:-${username}_$(openssl rand -hex 3)}"
    local hosts_file="${5:-$HOME/Documents/Git/matrix-docker-ansible-deploy/inventory/hosts}"

    if [[ ! -f "$hosts_file" ]]; then
        echo "Error: Hosts file not found at $hosts_file"
        return 1
    fi

    sudo ansible-playbook -i "$hosts_file" setup.yml \
        --extra-vars="username=${username} password='${password}' admin=${admin}" \
        --tags=register-user

    curl -XPOST -d "{
        \"identifier\": { \"type\": \"m.id.user\", \"user\": \"${username}\" },
        \"password\": \"${password}\",
        \"type\": \"m.login.password\",
        \"device_id\": \"${device_id}\"
    }" 'https://matrix.irregularchat.com/_matrix/client/r0/login'
}

# ----------------------
# Movie Transfer
# ----------------------

transfer_file() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: transfer_file path1 path2 ..."
        printf "This command uses rsync to transfer files or directories to a remote host.\n"
        printf "The remote host, port, and base remote path are read from the ~/.env file.\n"
        printf "An example ~/.env file is provided at $HOME/macos/.env-template\n"
        return 0
    fi
    #read .env file for the remote host and port and base remote path if file exists
    if [[ -f ~/.env ]]; then
        source ~/.env
    else
        echo "Error: ~/.env file not found"
        read -p "Do you want to create a new ~/.env file? (y/n): " REPLY
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "REMOTE_HOST=username@192.168.1.xxx" >> ~/.env
            echo "REMOTE_PORT=2220" >> ~/.env
            echo "REMOTE_BASE_PATH=/path/to/directory" >> ~/.env
            echo "~/.env file created, please edit the file with the correct remote host, port, and base remote path"
            return 1
            
        else
            return 1
        fi
    fi
    remote_host=$REMOTE_HOST
    remote_port=$REMOTE_PORT
    base_remote_path=$REMOTE_BASE_PATH
    #check if vars are set
    if [[ -z "$remote_host" || -z "$remote_port" || -z "$base_remote_path" ]]; then
        echo "Error: Remote host, port, or base remote path not set in ~/.env file"
        return 1
    fi
    #check if can connect to remote host
    if ! ssh -q -p "$remote_port" "$remote_host" "exit"; then
        echo "Error: Cannot connect to remote host"
        return 1
    fi

    for path in "$@"; do
        if [[ ! -e "$path" ]]; then
            echo "Error: '$path' does not exist"
            continue
        fi

        local target_path="$base_remote_path/$(basename "$path")"
        if [[ -d "$path" ]]; then
            ssh -p "$remote_port" "$remote_host" "mkdir -p \"$target_path\""
            rsync -vz --progress -e "ssh -p $remote_port" "$path/"* "$remote_host:$target_path/" || echo "Failed to transfer directory '$path'"
        elif [[ -f "$path" ]]; then
            ssh -p "$remote_port" "$remote_host" "mkdir -p \"$base_remote_path\""
            rsync -vz --progress -e "ssh -p $remote_port" "$path" "$remote_host:$target_path" || echo "Failed to transfer file '$path'"
        else
            echo "Error: '$path' is neither a file nor a directory"
        fi
    done
}