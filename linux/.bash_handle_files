# File handling helpers for bash
# (ported from .zsh_handle_files)

# Safely move a file to trash (if trash-cli is available)
safe_rm() {
    if command -v trash &> /dev/null; then
        trash "$@"
    else
        rm -i "$@"
    fi
}

# --- Expanded file handling helpers ported from .zsh_handle_files ---

# Process a single image: sanitize EXIF, convert, rotate, OCR, etc.
process_single_image() {
    local file="$1"
    if [[ ! -e "$file" ]]; then
        echo "File does not exist: $file"; return 1
    fi
    if [[ "$file" =~ \.(jpg|jpeg|png|tiff|gif|bmp|ico|webp)$ ]]; then
        echo "Processing image file: $file"
    elif [[ "$file" =~ \.pdf$ ]]; then
        echo "Processing PDF file: $file"
    else
        echo "Unsupported file type: $file"; return 1
    fi
    # EXIF sanitize (if exiftool)
    if command -v exiftool &> /dev/null; then
        exiftool -overwrite_original -all= "$file"
    fi
    # Rotate (if convert)
    # Usage: process_single_image file [degrees]
    if [[ -n "$2" ]]; then
        if command -v convert &> /dev/null; then
            convert "$file" -rotate "$2" "$file"
        fi
    fi
}

# Batch rename files with a pattern
batch_rename() {
    if [ $# -lt 2 ]; then
        echo "Usage: batch_rename <pattern> <replacement>"
        return 1
    fi
    for f in *$1*; do
        mv -- "$f" "${f//$1/$2}"
    done
}

# Clean markdown files by handling problematic separators
clean_markdown() {
    if [ $# -eq 0 ]; then
        echo "Usage: clean_markdown <input_file> [output_file]"
        return 1
    fi
    local input_file="$1"
    local output_file="${2:-${input_file%.*}_cleaned.${input_file##*.}}"
    if [ ! -f "$input_file" ]; then
        echo "Error: Input file '$input_file' does not exist"
        return 1
    fi
    awk '
        BEGIN { in_yaml = 0; yaml_count = 0 }
        /^---$/ {
            if (NR == 1) {
                in_yaml = 1
                yaml_count = 1
                print
                next
            }
            if (in_yaml && yaml_count == 1) {
                in_yaml = 0
                print
                next
            }
            print "***"
            next
        }
        { print }
    ' "$input_file" > "$output_file"
    echo "Cleaned markdown file created: $output_file"
}

# create backup of a file or directory
backup() {
  # human readiable date and time with backup
  # check if dir or files exists
  backup_name=".bak_$(date +%Y-%m-%d_%H-%M-%S)"
  # check if rsync is installed if not set copy command to cp
  if command -v rsync &> /dev/null; then
    COPY_CMD="rsync"
  else
    COPY_CMD="cp"
  fi
  # take files, dictionaries as arguments get full path as needed many args possible
  
  for file in "$@"; do
    if [ -f "$file" ]; then
      $COPY_CMD "$file" "$file$backup_name"
      echo "Backup of $file created as $file$backup_name"
    elif [ -d "$file" ]; then
      $COPY_CMD -r "$file" "$file$backup_name"
      echo "Backup of $file created as $file$backup_name"
    else
      echo "$file does not exist"
    fi
  done

}

# Nano Functions
reset_file() {
    # usage: reset_file file1 file2 ...
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: reset_file file1 file2 ..."
        return 0
    fi
  # Reset the file content to an empty string
  # use the backup function to create a backup of the file before erasing
  #handle one or multiple files
  # catch escapes and errors to handle prompting user to restore backup or delete
  for file in "$@"; do
    backup "$file"
    echo "" > "$file"
    echo "File content backed up and erased."
    echo "Opening $file in nano editor"
    #echo >> the filename to the file with a # at the beginning
    echo "# $file" >> "$file"
    #sleep half a second
    sleep 0.5
    nano "$file"
    # prompt user to restore backup or delete
    ls $file$backup_name
    # default to no
    see_diff="n"
    read -p "Do you want to see the difference between the original and backup file? (y/n):(default:n) " see_diff
    if [ "$see_diff" == "y" ]; then
      diff "$file" "$file$backup_name"
      restore_backup="n"
      read -p "Do you want to restore the backup file? (y/n):(default:n) " restore_backup
      if [ "$restore_backup" == "y" ]; then
        echo "This will delete any changes made to the original file"
        restore_backup_confirm="n"
        read -p "Are you sure you want to restore the backup file? (y/n):(default:n) " restore_backup_confirm
        if [ "$restore_backup_confirm" == "y" ]; then
          mv "$file$backup_name" "$file"
          echo "Backup file restored."
        fi
      fi
    fi
  done
}
